{
  "name": "duplexer2",
  "version": "0.1.1",
  "description": "Like duplexer but using streams3",
  "files": [
    "index.js"
  ],
  "scripts": {
    "pretest": "eslint --config @shinnn/node-legacy --rule 'quotes: [2, double]' example.js --rule 'no-underscore-dangle: 0' index.js test.js",
    "test": "node --strong_mode --harmony_destructuring --harmony_rest_parameters --harmony_spreadcalls --throw-deprecation --trace-sync-io --track-heap-objects test.js | tap-spec",
    "coverage": "node --strong_mode --harmony_destructuring --harmony_rest_parameters --harmony_spreadcalls node_modules/.bin/istanbul cover test.js"
  },
  "repository": {
    "type": "git",
    "url": "deoxxa/duplexer2"
  },
  "keywords": [
    "duplex",
    "duplexer",
    "stream",
    "stream3",
    "join",
    "combine"
  ],
  "author": {
    "name": "Conrad Pankoff",
    "email": "deoxxa@fknsrs.biz",
    "url": "http://www.fknsrs.biz/"
  },
  "license": "BSD-3-Clause",
  "dependencies": {
    "readable-stream": "^2.0.2"
  },
  "devDependencies": {
    "@shinnn/eslint-config-node-legacy": "^1.0.0",
    "eslint": "^1.7.1",
    "istanbul": "^0.3.22",
    "object-assign": "^4.0.1",
    "tap-spec": "^4.1.0",
    "tape": "^4.2.1",
    "through": "^2.3.8"
  },
  "readme": "# duplexer2 [![Build Status](https://travis-ci.org/deoxxa/duplexer2.svg?branch=master)](https://travis-ci.org/deoxxa/duplexer2) [![Coverage Status](https://coveralls.io/repos/deoxxa/duplexer2/badge.svg?branch=master&service=github)](https://coveralls.io/github/deoxxa/duplexer2?branch=master)\n\nLike [duplexer](https://github.com/Raynos/duplexer) but using Streams3\n\n```javascript\nconst duplexer2 = require(\".\");\nconst {Readable, Writable} = require(\"stream\");\n\nconst writable = new Writable({\n  write(data, enc, cb) {\n    if (readable.push(data)) {\n      cb();\n      return;\n    }\n    readable.once(\"drain\", cb);\n  }\n});\n\nconst readable = new Readable({read() {/* no-op */}});\n\n// simulate the readable thing closing after a bit\nwritable.once(\"finish\", () => setTimeout(() => readable.push(null), 300));\n\nconst duplex = duplexer2({}, writable, readable)\n.on(\"data\", data => console.log(\"got data\", data.toString()))\n.on(\"finish\", () => console.log(\"got finish event\"))\n.on(\"end\", () => console.log(\"got end event\"));\n\nduplex.write(\"oh, hi there\", () => console.log(\"finished writing\"));\nduplex.end(() => console.log(\"finished ending\"));\n```\n\n```\ngot data \"oh, hi there\"\nfinished writing\ngot finish event\nfinished ending\ngot end event\n```\n\n## Overview\n\nThis is a reimplementation of [duplexer](https://www.npmjs.com/package/duplexer) using the\nStreams3 API which is standard in Node as of v4. Everything largely\nworks the same.\n\n\n\n## Installation\n\n[Available via `npm`](https://docs.npmjs.com/cli/install):\n\n```\n$ npm i duplexer2\n```\n\n## API\n\n### duplexer2\n\nCreates a new `DuplexWrapper` object, which is the actual class that implements\nmost of the fun stuff. All that fun stuff is hidden. DON'T LOOK.\n\n```javascript\nduplexer2([options], writable, readable)\n```\n\n```javascript\nconst duplex = duplexer2(new stream.Writable(), new stream.Readable());\n```\n\nArguments\n\n* __options__ - an object specifying the regular `stream.Duplex` options, as\n  well as the properties described below.\n* __writable__ - a writable stream\n* __readable__ - a readable stream\n\nOptions\n\n* __bubbleErrors__ - a boolean value that specifies whether to bubble errors\n  from the underlying readable/writable streams. Default is `true`.\n\n\n## License\n\n3-clause BSD. [A copy](./LICENSE) is included with the source.\n\n## Contact\n\n* GitHub ([deoxxa](http://github.com/deoxxa))\n* Twitter ([@deoxxa](http://twitter.com/deoxxa))\n* Email ([deoxxa@fknsrs.biz](mailto:deoxxa@fknsrs.biz))\n",
  "readmeFilename": "README.md",
  "_id": "duplexer2@0.1.1",
  "dist": {
    "shasum": "b89252310b7f43e75f9aa46aea5d33ba203d0482"
  },
  "_from": "duplexer2@~0.1.0",
  "_resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.1.tgz"
}
