{
  "name": "bin-wrapper",
  "version": "3.0.2",
  "description": "Binary wrapper that makes your programs seamlessly available as local dependencies",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "kevva/bin-wrapper"
  },
  "author": {
    "name": "Kevin Mårtensson",
    "email": "kevinmartensson@gmail.com",
    "url": "https://github.com/kevva"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "bin",
    "check",
    "local",
    "wrapper"
  ],
  "dependencies": {
    "bin-check": "^2.0.0",
    "bin-version-check": "^2.1.0",
    "download": "^4.0.0",
    "each-async": "^1.1.1",
    "lazy-req": "^1.0.0",
    "os-filter-obj": "^1.0.0"
  },
  "devDependencies": {
    "ava": "^0.0.4",
    "nock": "^2.6.0",
    "rimraf": "^2.2.8"
  },
  "readme": "# bin-wrapper [![Build Status](http://img.shields.io/travis/kevva/bin-wrapper.svg?style=flat)](https://travis-ci.org/kevva/bin-wrapper)\n\n> Binary wrapper that makes your programs seamlessly available as local dependencies\n\n\n## Install\n\n```\n$ npm install --save bin-wrapper\n```\n\n\n## Usage\n\n```js\nvar BinWrapper = require('bin-wrapper');\n\nvar base = 'https://github.com/imagemin/gifsicle-bin/raw/master/vendor';\nvar bin = new BinWrapper()\n\t.src(base + '/osx/gifsicle', 'darwin')\n\t.src(base + '/linux/x64/gifsicle', 'linux', 'x64')\n\t.src(base + '/win/x64/gifsicle.exe', 'win32', 'x64')\n\t.dest(path.join('vendor'))\n\t.use(process.platform === 'win32' ? 'gifsicle.exe' : 'gifsicle')\n\t.version('>=1.71');\n\nbin.run(['--version'], function (err) {\n\tconsole.log('gifsicle is working');\n});\n```\n\nGet the path to your binary with `bin.path()`:\n\n```js\nconsole.log(bin.path()); // => path/to/vendor/gifsicle\n```\n\n\n## API\n\n### new BinWrapper(options)\n\nCreates a new `BinWrapper` instance.\n\n#### options.skipCheck\n\nType: `boolean`  \nDefault: `false`\n\nWhether to skip the binary check or not.\n\n#### options.strip\n\nType: `number`  \nDefault: `1`\n\nStrip a number of leading paths from file names on extraction.\n\n### .src(url, [os], [arch])\n\nAdds a source to download.\n\n#### url\n\nType: `string`\n\nAccepts a URL pointing to a file to download.\n\n#### os\n\nType: `string`\n\nTie the source to a specific OS.\n\n#### arch\n\nType: `string`\n\nTie the source to a specific arch.\n\n### .dest(dest)\n\n#### dest\n\nType: `string`\n\nAccepts a path which the files will be downloaded to.\n\n### .use(bin)\n\n#### bin\n\nType: `string`\n\nDefine which file to use as the binary.\n\n### .path()\n\nReturns the full path to your binary.\n\n### .version(range)\n\n#### range\n\nType: `string`\n\nDefine a [semver range](https://github.com/isaacs/node-semver#ranges) to check \nthe binary against.\n\n### .run([cmd], callback)\n\nRuns the search for the binary. If no binary is found it will download the file \nusing the URL provided in `.src()`.\n\n#### cmd\n\nType: `array`  \nDefault: `['--version']`\n\nCommand to run the binary with. If it exits with code `0` it means that the \nbinary is working.\n\n#### callback(err)\n\nType: `function`\n\nReturns nothing but a possible error.\n\n\n## License\n\nMIT © [Kevin Mårtensson](http://kevinmartensson.com)\n",
  "readmeFilename": "readme.md",
  "_id": "bin-wrapper@3.0.2",
  "dist": {
    "shasum": "e7b81b78cbfa5e6010527648b0d36fce05d267e8"
  },
  "_from": "bin-wrapper@^3.0.0",
  "_resolved": "https://registry.npmjs.org/bin-wrapper/-/bin-wrapper-3.0.2.tgz"
}
