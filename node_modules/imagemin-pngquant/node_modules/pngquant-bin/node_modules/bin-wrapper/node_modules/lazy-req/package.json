{
  "name": "lazy-req",
  "version": "1.1.0",
  "description": "Require modules lazily",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "sindresorhus/lazy-req"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "contributors": [
    {
      "name": "Jorge Bucaran",
      "email": "jbucaran@me.com"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "xo && node test.js"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "require",
    "load",
    "module",
    "modules",
    "lazy",
    "lazily",
    "defer",
    "deferred"
  ],
  "devDependencies": {
    "ava": "0.0.4",
    "xo": "*"
  },
  "readme": "# lazy-req [![Build Status](https://travis-ci.org/sindresorhus/lazy-req.svg?branch=master)](https://travis-ci.org/sindresorhus/lazy-req)\n\n> Require modules lazily\n\n\n## Install\n\n```\n$ npm install --save lazy-req\n```\n\n\n## Usage\n\n```js\n// pass in `require` or a custom require function\nvar lazyReq = require('lazy-req')(require);\nvar _ = lazyReq('lodash');\n\n// where you would normally do\n_.isNumber(2);\n\n// you now instead call it as a function\n_().isNumber(2);\n\n// it's cached on consecutive calls\n_().isString('unicorn');\n\n// extract lazy variations of the props you need\nvar members = lazyReq('lodash')('isNumber', 'isString');\n\n// useful when using destructuring assignment in ES2015\nconst { isNumber, isString } = lazyReq('lodash')('isNumber', 'isString');\n\n// works out of the box for functions and regular properties\nvar stuff = lazyReq('./math-lib')('sum', 'PHI');\nconsole.log(stuff.sum(1, 2)); // => 3\nconsole.log(stuff.PHI); // => 1.618033\n```\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "_id": "lazy-req@1.1.0",
  "_from": "lazy-req@^1.0.0"
}
